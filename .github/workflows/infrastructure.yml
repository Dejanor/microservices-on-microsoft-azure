name: Setup AKS with Terraform

on:
 workflow_dispatch:
 push:
   branches: [ "main" ]

# env:
#  CONTAINER_REGISTRY: "your-azure-container-registry"
#  CONTAINER_NAME: "your-container-name"
#  RESOURCE_GROUP: "your-resource-group"
#  CLUSTER_NAME: "your-cluster-name"
#  CHART_PATH: "your-chart-path"
#  CHART_OVERRIDE_PATH: "your-chart-override-path"


#  buildImage:
#    permissions:
#      contents: read
#      id-token: write
#    runs-on: ubuntu-latest
#    steps:
#       Checks out the repository this file is in
#      - uses: actions/checkout@v4

#       Logs in with your Azure credentials#
#      - name: Azure login
#        uses: azure/login@v1.4.6
#        with:
#          client-id: ${{ secrets.AZURE_CLIENT_ID }}
#          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

#       Builds and pushes an image up to your Azure Container Registry
#      - name: Build and push image to ACR
#        run: |
#          az acr build --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }} --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.RESOURCE_GROUP }} .
jobs:
  deploy:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4
        # - name: Azure login
        #   uses: azure/login@v1.4.6
        #   with:
        #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
        #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        - uses: hashicorp/setup-terraform@v3 
        - name: run terraform
          run: |
            cd terraform
            
            export MSYS_NO_PATHCONV=1

            export ARM_SUBSCRIPTION_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            export ARM_TENANT_ID="${{ secrets.AZURE_TENANT_ID }}"
            export ARM_CLIENT_ID="${{ secrets.TF_VAR_ARM_CLIENT_ID }}"
            export ARM_CLIENT_SECRET="${{ secrets.TF_VAR_ARM_CLIENT_SECRET }}"
            export ARM_ACCESS_KEY="${{ secrets.TF_VAR_ARM_ACCESS_KEY }}"
            
            export TF_VAR_ARM_SUBSCRIPTION_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            export TF_VAR_ARM_TENANT_ID="${{ secrets.AZURE_TENANT_ID }}"
            export TF_VAR_ARM_CLIENT_ID="${{ secrets.TF_VAR_ARM_CLIENT_ID }}"
            export TF_VAR_ARM_CLIENT_SECRET="${{ secrets.TF_VAR_ARM_CLIENT_SECRET }}"
            export TF_VAR_ARM_ACCESS_KEY="${{ secrets.TF_VAR_ARM_ACCESS_KEY }}"

            
            export TF_VAR_NAMEDOTCOM_USERNAME="${{ secrets.TF_VAR_NAMEDOTCOM_USERNAME }}"
            export TF_VAR_NAMEDOTCOM_TOKEN="${{ secrets.TF_VAR_NAMEDOTCOM_TOKEN }}"
            
            terraform init
            # terraform apply --auto-approve

            # echo "resource_group=$(terraform output -raw resource_group_name)" >> $GITHUB_ENV
            # echo "cluster_name=$(terraform output -raw kubernetes_cluster_name)" >> $GITHUB_ENV

            # terraform state rm helm_release.nginx_ingress_controller
            # terraform destroy --auto-approve

        # - name: Save context information as artifact
        #   run: |
        #     echo "resource_group=${{ env.resource_group }}" > context-info.txt
        #     echo "cluster_name=${{ env.cluster_name }}" >> context-info.txt
        #   shell: bash
  
        # - name: Upload artifact
        #   uses: actions/upload-artifact@v3
        #   with:
        #     name: context-info
        #     path: context-info.txt
