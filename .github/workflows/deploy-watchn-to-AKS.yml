name: Deploy to AKS

on:
  workflow_dispatch:
  push: 
    branches: [ "main" ]
  workflow_run:
    workflows: ["Publish and Patch Build"]
    types:
      - completed

jobs:
  deploy_to_aks:
    name: Deploy watchn to AKS
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
        - name: Check out code
          uses: actions/checkout@v3
          
        - uses: hashicorp/setup-terraform@v3 
        - name: Run Terraform
          id: terraform
          run: |
            cd terraform
            
            export MSYS_NO_PATHCONV=1
  
            export ARM_SUBSCRIPTION_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            export ARM_TENANT_ID="${{ secrets.AZURE_TENANT_ID }}"
            export ARM_CLIENT_ID="${{ secrets.TF_VAR_ARM_CLIENT_ID }}"
            export ARM_CLIENT_SECRET="${{ secrets.TF_VAR_ARM_CLIENT_SECRET }}"
            export ARM_ACCESS_KEY="${{ secrets.TF_VAR_ARM_ACCESS_KEY }}"
            
            export TF_VAR_ARM_SUBSCRIPTION_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            export TF_VAR_ARM_TENANT_ID="${{ secrets.AZURE_TENANT_ID }}"
            export TF_VAR_ARM_CLIENT_ID="${{ secrets.TF_VAR_ARM_CLIENT_ID }}"
            export TF_VAR_ARM_CLIENT_SECRET="${{ secrets.TF_VAR_ARM_CLIENT_SECRET }}"
            export TF_VAR_ARM_ACCESS_KEY="${{ secrets.TF_VAR_ARM_ACCESS_KEY }}"
            
            terraform init
            echo "resource_group=$(terraform output -raw resource_group_name)" >> $GITHUB_ENV
            echo "cluster_name=$(terraform output -raw kubernetes_cluster_name)" >> $GITHUB_ENV
            
        - name: Azure login
          uses: azure/login@v1.4.6
          with:
                client-id: ${{ secrets.TF_VAR_ARM_CLIENT_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                            
        - name: Use AKS context
          uses: azure/aks-set-context@v3
          with:
            resource-group: ${{ env.resource_group }}
            cluster-name: ${{ env.cluster_name }}

        - uses: azure/setup-kubectl@v3
          with:
             version: 'v1.21.0'
          id: install
  
        - name: Setup Helm
          run: |
            curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
  
        - name: Setup Helmfile
          run: |
            wget https://github.com/helmfile/helmfile/releases/download/v0.154.0/helmfile_0.154.0_linux_amd64.tar.gz
            tar xvzf helmfile_0.154.0_linux_amd64.tar.gz
            sudo cp helmfile /usr/sbin
            helmfile --version
  
        - name: Setup Helm Diff Plugin
          run: helm plugin install https://github.com/databus23/helm-diff
  
        - name: Deploy Monitoring Stack
          run: |
            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
            helm repo add stable https://charts.helm.sh/stable
            helm repo add grafana https://grafana.github.io/helm-charts
            helm repo update
  
            cd capstone-deploy/kubernetes/
            helmfile apply
  
            kubectl config set-context --current --namespace default
            helm install prometheus prometheus-community/kube-prometheus-stack
            helm install loki grafana/loki-stack --namespace loki --create-namespace --set grafana.enabled=true --set loki.isDefault=false
            kubectl get secret --namespace loki loki-grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo
  
            cd /path/to/your/monitoring/directory
            kubectl apply -f assets-service-monitor.yml
            kubectl apply -f catalog-service-monitor.yml
            kubectl apply -f orders-service-monitor.yml
            kubectl apply -f carts-service-monitor.yml
            kubectl apply -f checkout-service-monitor.yml
            kubectl apply -f prometheus-grafana-service.yml
            kubectl apply -f prometheus-service.yml
  
        # - name: Apply Ingress Configuration
        #   run: |
        #     cd /path/to/your/ingress/directory
        #     kubectl apply -f ui-ingress.yml
  
        # - name: Install Vertical Pod Autoscaler
        #   run: |
        #     cd /path/to/your/vpa/directory
        #     chmod +x install-vpa.sh
        #     ./install-vpa.sh
        #     kubectl apply -f vpa-auto-mode.yml


